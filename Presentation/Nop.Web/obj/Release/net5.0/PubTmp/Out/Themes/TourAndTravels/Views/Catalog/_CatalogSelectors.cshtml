@model CatalogProductsModel

@if (Model.Products.Count <= 0 &&
    !Model.PriceRangeFilter.Enabled &&
    !Model.SpecificationFilter.Enabled &&
    !Model.ManufacturerFilter.Enabled)
{
    return;
}

<div class="product-selectors" id="DivFilterPage" >

    <div class="sortingHeader">
        <h5 class="mobile_title">@T("Catalog.FilterOptions")</h5>
        <button class="btnClose"><i class="fas fa-times"></i></button>
    </div>

    <section class="viewMode_options">
        @*view mode*@
        @if (Model.AllowProductViewModeChanging)
        {
            <div class="product-viewmode">
                <span>@T("Catalog.ViewMode")</span>
                @if (Model.AvailableViewModes.Count > 1)
                {
                    var gridMode = Model.AvailableViewModes[0];
                    var listMode = Model.AvailableViewModes[1];

                    <a class="viewmode-icon grid @if (gridMode.Selected){<text>selected</text>}" data-viewmode="@gridMode.Value" title="@gridMode.Text">@gridMode.Text</a>
                    <a class="viewmode-icon list @if (listMode.Selected){<text>selected</text>}" data-viewmode="@listMode.Value" title="@listMode.Text">@listMode.Text</a>
                }
            </div>
            <script asp-location="Footer">
                $(document).ready(function () {
                    var $viewModeEls = $('[data-viewmode]');
                    $viewModeEls.on('click', function () {
                        if (!$(this).hasClass('selected')) {
                            $viewModeEls.toggleClass('selected');
                            CatalogProducts.getProducts();
                        }
                        return false;
                    });

                    $(CatalogProducts).on('before', function (e) {
                        var $viewModeEl = $('[data-viewmode].selected');
                        if ($viewModeEl) {
                            e.payload.urlBuilder
                                .addParameter('viewmode', $viewModeEl.data('viewmode'));
                        }
                    });
                });
            </script>
        }
    </section>

    <section class="sorting_Options">
        @if (Model.AllowProductSorting)
        {
            <div class="product-sorting">
                <span>@T("Catalog.OrderBy")</span>
                @Html.DropDownList("products-orderby", Model.AvailableSortOptions, new { aria_label = T("Catalog.OrderBy.Label") })
            </div>
            <script asp-location="Footer">
                $(document).ready(function () {
                    var $orderByEl = $('#products-orderby');
                    $orderByEl.on('change', function () {
                        CatalogProducts.getProducts();
                    });

                    $(CatalogProducts).on('before', function (e) {
                        e.payload.urlBuilder
                            .addParameter('orderby', $orderByEl.val());
                    });
                });
            </script>
        }

        @if (Model.AllowCustomersToSelectPageSize)
        {
            <div class="product-page-size">
                <span>@T("Catalog.PageSize")</span>
                @Html.DropDownList("products-pagesize", Model.PageSizeOptions, new { aria_label = T("Catalog.PageSize.Label") })
                <small>@T("Catalog.PageSize.PerPage")</small>
            </div>
            <script asp-location="Footer">
                $(document).ready(function () {
                    var $pageSizeEl = $('#products-pagesize');
                    $pageSizeEl.on('change', function () {
                        CatalogProducts.getProducts();
                    });

                    $(CatalogProducts).on('before', function (e) {
                        e.payload.urlBuilder
                            .addParameter('pagesize', $pageSizeEl.val());
                    });
                });
            </script>
        }

        <div class="packDuration">
            <span>@T("Catalog.Duration")</span>
            @Html.DropDownList("products-pagesize", Model.PageSizeOptions, new { aria_label = T("Catalog.PageSize.Label") })
        </div>

        <div class="packBudget">
            <span>@T("Catalog.Budget")</span>
            @Html.DropDownList("products-pagesize", Model.PageSizeOptions, new { aria_label = T("Catalog.PageSize.Label") })
        </div>
    </section>

</div>

<div class="MobileSorting">
    <button>
        <i class="fas fa-filter"></i>
        @T("Catalog.Filter")
    </button>
</div>

<script>

    //function ShowSortingMenu(divToShow) {
    //    document.getElementById(divToShow).style.display = "flex";
    //}

    $('.MobileSorting button').on('click', function () {
        $('.product-selectors').addClass('filters_outer_wrapper active-filter-popup');
    });

    $('.btnClose').on('click', function () {
        $('.product-selectors').removeClass('filters_outer_wrapper active-filter-popup');
    });


</script>
